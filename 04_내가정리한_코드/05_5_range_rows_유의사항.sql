/* ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW */
SELECT *, SUM(UNIT_PRICE) OVER (ORDER BY UNIT_PRICE) AS UNIT_PRICE_SUM FROM PRODUCTS;

SELECT *, SUM(UNIT_PRICE) OVER (ORDER BY UNIT_PRICE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS UNIT_PRICE_SUM FROM PRODUCTS;

SELECT *, SUM(UNIT_PRICE) OVER (ORDER BY UNIT_PRICE ROWS UNBOUNDED PRECEDING) AS UNIT_PRICE_SUM FROM PRODUCTS;

/* 중앙합, 중앙 평균(CENTERED AVERAGE) */
SELECT PRODUCT_ID, PRODUCT_NAME, CATEGORY_ID, UNIT_PRICE
     , SUM(UNIT_PRICE) OVER (PARTITION BY CATEGORY_ID ORDER BY UNIT_PRICE ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS UNIT_PRICE_SUM
	, AVG(UNIT_PRICE) OVER (PARTITION BY CATEGORY_ID ORDER BY UNIT_PRICE ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS UNIT_PRICE_AVG
FROM PRODUCTS;

/* ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING */
SELECT PRODUCT_ID, PRODUCT_NAME, CATEGORY_ID, UNIT_PRICE
     , SUM(UNIT_PRICE) OVER (PARTITION BY CATEGORY_ID ORDER BY UNIT_PRICE ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS UNIT_PRICE_SUM
FROM PRODUCTS;


/* RANGE와 ROWS의 차이 */
WITH
    TEMP_01 AS (
        SELECT C.CATEGORY_ID, DATE_TRUNC('DAY', B.ORDER_DATE) AS ORD_DATE, SUM(A.AMOUNT) SUM_BY_DAILY_CAT
        FROM ORDER_ITEMS A
                 JOIN ORDERS B ON A.ORDER_ID = B.ORDER_ID
                 JOIN PRODUCTS C ON A.PRODUCT_ID = C.PRODUCT_ID
        GROUP BY C.CATEGORY_ID, DATE_TRUNC('DAY', B.ORDER_DATE)
        ORDER BY 1, 2
    )
SELECT *
     , SUM(SUM_BY_DAILY_CAT) OVER (PARTITION BY CATEGORY_ID ORDER BY ORD_DATE
	                              ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)
	, SUM(SUM_BY_DAILY_CAT) OVER (PARTITION BY CATEGORY_ID ORDER BY ORD_DATE
	                              RANGE BETWEEN INTERVAL '2' DAY PRECEDING AND CURRENT ROW)
FROM TEMP_01;

/************************************************
RANGE와 ROWS 적용 시 유의 사항
 *************************************************/
-- RANGE와 ROWS의 차이: ORDER BY 시 동일 ROW 처리 차이 - 1
SELECT EMPNO, DEPTNO, SAL
     , AVG(SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL) AS AVG_DEFAULT
	, AVG(SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AVG_RANGE
	, AVG(SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AVG_ROWS
	, SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL) AS SUM_DEFAULT
	, SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_ROWS
FROM HR.EMP;

-- RANGE와 ROWS의 차이: ORDER BY 시 동일 ROW 처리 차이 - 2
SELECT EMPNO, DEPTNO, SAL, DATE_TRUNC('MONTH', HIREDATE)::DATE AS HIREMONTH
	, AVG(SAL) OVER (PARTITION BY DEPTNO ORDER BY DATE_TRUNC('MONTH', HIREDATE)) AS AVG_DEFAULT
	, AVG(SAL) OVER (PARTITION BY DEPTNO ORDER BY DATE_TRUNC('MONTH', HIREDATE) RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AVG_RANGE
	, AVG(SAL) OVER (PARTITION BY DEPTNO ORDER BY DATE_TRUNC('MONTH', HIREDATE) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AVG_ROWS
	, SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY DATE_TRUNC('MONTH', HIREDATE)) AS SUM_DEFAULT
	, SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY DATE_TRUNC('MONTH', HIREDATE) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_ROWS
FROM HR.EMP;